my_deye_power_battery:
  automation:

    # === 1. –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø–∞–ª–æ ===
    - id: a_power_deye_grid_off
      alias: "a_power_deye_grid_off"
      initial_state: true
      mode: single
      trigger:
        - platform: state
          entity_id: binary_sensor.deye_grid
          from: "on"
          to: "off"
          for: "00:00:10"
      action:
        - delay: "00:00:05"
        - variables:
            cap: "{{ states('input_number.battery_capacity_ah')|float(120) }}"
            I: "{{ states('sensor.deye_battery_current')|float(0) }}"
            i_abs: "{{ (I|abs)|round(2) }}"
            pct: "{{ states('sensor.battery_remaining_percent')|int(100) }}"
            eta: "{{ states('sensor.backup_runtime_hm') }}"
            vbat: >-
              {% set v = states('sensor.deye_battery_voltage') %}
              {{ v if v not in ['unknown','unavailable',''] else '' }}
            load_p: >-
              {% set l = states('sensor.load_power') %}
              {{ l if l not in ['unknown','unavailable',''] else '' }}
            th: 0.1
            dir_text: >-
              {% if I < -th %}–∏–¥—ë—Ç –†–ê–ó–†–Ø–î –æ—Ç –±–∞—Ç–∞—Ä–µ–∏
              {% elif I > th %}–∏–¥—ë—Ç –ó–ê–†–Ø–î –±–∞—Ç–∞—Ä–µ–∏
              {% else %}—Ç–æ–∫–∞ –ø–æ—á—Ç–∏ –Ω–µ—Ç{% endif %}
            eta_text: >-
              {% if I < -th %}–æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {{ eta }}
              {% else %}–Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è (–Ω–µ—Ç —Ä–∞–∑—Ä—è–¥–∞){% endif %}
            nowts: "{{ now().strftime(\"%H:%M' %d.%m\") }}"
        - service: telegram_bot.send_message
          data:
            target: [374673383, 496868345]
            message: |-
              üö® –°–≤–µ—Ç –ø—Ä–æ–ø–∞–ª
              üîã –û—Å—Ç–∞—Ç–æ–∫: {{ pct }}% (—ë–º–∫–æ—Å—Ç—å {{ cap|int }} –ê¬∑—á)
              üîå –¢–æ–∫: {{ i_abs }} –ê ‚Äî {{ dir_text }}
              ‚è≥ –ü—Ä–æ–≥–Ω–æ–∑: {{ eta_text }}
              {% if vbat %}üîã –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ê–ö–ë: {{ vbat }} –í{% endif %}
              {% if load_p %}‚öôÔ∏è –ù–∞–≥—Ä—É–∑–∫–∞: {{ load_p }} –í—Ç{% endif %}
              üïí –í—Ä–µ–º—è: {{ nowts }}

    # === 2. –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ===
    - id: a_power_deye_grid_on
      alias: "a_power_deye_grid_on"
      initial_state: true
      mode: single
      trigger:
        - platform: state
          entity_id: binary_sensor.deye_grid
          from: "off"
          to: "on"
          for: "00:00:10"
      action:
        - delay: "00:00:05"
        - variables:
            cap: "{{ states('input_number.battery_capacity_ah')|float(120) }}"
            dur_s: "{{ (as_timestamp(trigger.to_state.last_changed) - as_timestamp(trigger.from_state.last_changed))|int(0) }}"
            h: "{{ (dur_s // 3600)|int }}"
            m: "{{ ((dur_s % 3600) // 60)|int }}"
            I: "{{ states('sensor.deye_battery_current')|float(0) }}"
            i_abs: "{{ (I|abs)|round(2) }}"
            vbat: >-
              {% set v = states('sensor.deye_battery_voltage') %}
              {{ v if v not in ['unknown','unavailable',''] else '' }}
            load_p: >-
              {% set l = states('sensor.load_power') %}
              {{ l if l not in ['unknown','unavailable',''] else '' }}
            nowts: "{{ now().strftime(\"%H:%M' %d.%m\") }}"
        - service: input_number.set_value
          target:
            entity_id: input_number.battery_remaining_ah
          data:
            value: "{{ cap }}"
        - service: telegram_bot.send_message
          data:
            target: [374673383, 496868345]
            message: |-
              ‚úÖ –°–≤–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
              ‚è± –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–ª–∏–ª–æ—Å—å: {{ h }} —á {{ '%02d'|format(m) }} –º–∏–Ω
              üîå –¢–æ–∫ —Å–µ–π—á–∞—Å: {{ i_abs }} –ê
              {% if vbat %}üîã –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ê–ö–ë: {{ vbat }} –í{% endif %}
              {% if load_p %}‚öôÔ∏è –ù–∞–≥—Ä—É–∑–∫–∞: {{ load_p }} –í—Ç{% endif %}
              üïí –í—Ä–µ–º—è: {{ nowts }}
