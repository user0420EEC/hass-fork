substitutions:
  device_name: led2
  brightness_ac_off: "50%"
  baby_night_light: "20%"

esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp01_1m


logger:


api:


ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: on

  ap:
    ssid: "Bratok-Light 2 Fallback Hotspot"
    password: "xnNSevGYINwo"
    
captive_portal:

binary_sensor:

  - platform: homeassistant
    name: "Home AC"
    entity_id: binary_sensor.home_ac_in
    id: home_ac_in

  - platform: template
    name: baby_night_light
    id: baby_night_light
    

light:
  - platform: monochromatic
    name: ${device_name}_ch1
    id: ${device_name}_ch1
    output: ${device_name}_out_ch1
    restore_mode: RESTORE_DEFAULT_OFF
    default_transition_length: 2s
    on_turn_on:
      then:
        - if:
            condition:
              binary_sensor.is_off: home_ac_in
            then:
              - light.turn_on:
                  id: ${device_name}_ch1
                  brightness: ${brightness_ac_off}
            else:
              - light.turn_on:
                  id: ${device_name}_ch1
                  brightness: 100%
  - platform: monochromatic
    name: ${device_name}_ch2
    id: ${device_name}_ch2
    output: ${device_name}_out_ch2
    restore_mode: RESTORE_DEFAULT_OFF
    default_transition_length: 2s
    on_turn_on:
      then:
        - if:
            condition:
              binary_sensor.is_off: home_ac_in
            then:
              - light.turn_on:
                  id: ${device_name}_ch2
                  brightness: ${brightness_ac_off}
            else:
              - light.turn_on:
                  id: ${device_name}_ch2
                  brightness: 100%
  - platform: monochromatic
    name: ${device_name}_ch3
    id: ${device_name}_ch3
    output: ${device_name}_out_ch3
    restore_mode: RESTORE_DEFAULT_OFF
    default_transition_length: 2s
    on_turn_on:
      then:
        - if:
            condition:
              - binary_sensor.is_off: home_ac_in
              - binary_sensor.is_off: baby_night_light
            then:
              - light.turn_on:
                  id: ${device_name}_ch3
                  brightness: ${brightness_ac_off}
        - if:
            condition:
              binary_sensor.is_on: baby_night_light
            then:
              - light.turn_on:
                  id: ${device_name}_ch3
                  brightness: ${baby_night_light}
        - if:
            condition:
              - binary_sensor.is_on: home_ac_in
              - binary_sensor.is_off: baby_night_light    
            then:
              - light.turn_on:
                  id: ${device_name}_ch3
#                  brightness: 100%


  - platform: monochromatic
    name: ${device_name}_ch4
    id: ${device_name}_ch4
    output: ${device_name}_out_ch4
    restore_mode: RESTORE_DEFAULT_OFF
    default_transition_length: 2s
    on_turn_on:
      then:
        - if:
            condition:
              binary_sensor.is_off: home_ac_in
            then:
              - light.turn_on:
                  id: ${device_name}_ch4
                  brightness: ${brightness_ac_off}
            else:
              - light.turn_on:
                  id: ${device_name}_ch4
                  brightness: 100%
output:
  - platform: esp8266_pwm
    id: ${device_name}_out_ch1
    pin: GPIO12
    frequency: 1000 Hz
  - platform: esp8266_pwm
    id: ${device_name}_out_ch2
    pin: GPIO15
    frequency: 1000 Hz
  - platform: esp8266_pwm
    id: ${device_name}_out_ch3
    pin: GPIO14
    frequency: 1000 Hz
  - platform: esp8266_pwm
    id: ${device_name}_out_ch4
    pin: GPIO4
    frequency: 1000 Hz
    
sensor:
  - platform: adc
    pin: A0
    name: "${device_name} - adc"
    update_interval: 1s
    accuracy_decimals: 4
    id: current_raw
    internal: true
  - platform: template
    name: "${device_name} - Power"
    unit_of_measurement: W
    accuracy_decimals: 1
    device_class: power
    update_interval: 30s
    id: my_power
    lambda: return id(current_raw).state;
    filters:
      - calibrate_linear:
        - 0.39844 -> 0.0
        - 0.4043 -> 0.14
        - 0.4053 -> 0.20
      - multiply: 24 # 12V lamp
  - platform: total_daily_energy
    name: "${device_name} - Total Daily Energy"
    power_id: my_power
    filters:
          # Multiplication factor from W to kW is 0.001
          - multiply: 0.001
    unit_of_measurement: kWh



time:

  - platform: homeassistant
    id: homeassistant_time
    update_interval: 300s
    on_time:
      - minutes: 1
        hours: 0
        then:
          - binary_sensor.template.publish:
              id: baby_night_light
              state: ON
      - minutes: 0
        hours: 4
        then:
          - binary_sensor.template.publish:
              id: baby_night_light
              state: OFF